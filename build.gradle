buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'java-test-fixtures'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "1.7.20"
    id "org.jlleitschuh.gradle.ktlint" version '10.2.1'
}

group 'com.guardsquare'
version '1.1.6'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

application {
    mainClassName = 'proguard.tools.KotlinMetadataPrinter'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    archiveName "kotlin-metadata-printer.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
}

dependencies {
    // TODO: replace with maven central dependency when dex support released
    implementation 'com.github.Guardsquare:proguard-core:4273954d97fe57893f9e02eee43d3781b5cc8726'

    // For some string utils.
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // For building the JSON output.
    implementation group: 'org.json', name: 'json', version: '20190722'

    // picocli for command line parsing.
    implementation group: 'info.picocli', name: 'picocli', version: '3.6.1'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:1.7.20"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:1.7.20"
    testImplementation 'com.github.tschuchortdev:kotlin-compile-testing:1.4.9'
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.4.2' // for kotest framework
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.4.2' // for kotest core jvm assertions
    testImplementation 'io.kotest:kotest-property-jvm:5.4.2' // for kotest property test
    testImplementation 'io.mockk:mockk:1.12.8' // for mocking

    testImplementation(testFixtures("com.guardsquare:proguard-core:9.0.4"))
}

def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(8)
}

task copyBuild(type: Copy) {
    dependsOn tasks.jar
    tasks.assemble.dependsOn(it)

    from tasks.jar.outputs
    into file("lib")
}

// TODO: proguard shrinking temporary disabled, since log4j in ProGuardCORE causes problems
task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn tasks.jar
    //tasks.assemble.dependsOn(it)

    injars tasks.jar.outputs, filter: '**.class,log4j2.xml,META-INF/services/**,META-INF/MANIFEST.MF'
    libraryjars configurations.findByName('compileClasspath').files - configurations.findByName('runtimeClasspath').files
    outjars "$buildDir/libs/kotlin-metadata-printer-shrunk.jar"
    outputs.file("$buildDir/libs/kotlin-metadata-printer-shrunk.jar")

    libraryjars "${compiler.get().metadata.installationPath}/jre/lib/rt.jar"

    dontwarn "picocli.**"
    dontwarn "org.xml.sax.**"
    dontwarn "org.objectweb.asm.**"

    forceprocessing
    ignorewarnings
    verbose
    keep 'public class proguard.tools.KotlinMetadataPrinter {' +
            'public static void main(java.lang.String[]);' +
          '}'

    optimizationpasses 3
    allowaccessmodification
    keepattributes "*Annotation*"

    adaptresourcefilecontents "META-INF/MANIFEST.MF,**.properties,META-INF/services/**"

    keep allowshrinking: true, 'enum picocli.** { *; }'

    keepclassmembers 'class * extends java.lang.Enum {' +
        'public static **[] values();' +
        'public static ** valueOf(java.lang.String);' +
    '}'

    keepclassmembers 'class * {'+
        '@picocli.CommandLine$* *;' +
    '}'

    repackageclasses 'o'
    keep 'class kotlinx.metadata.jvm.impl.JvmMetadataExtensions { *; }'
    keep 'class kotlinx.metadata.impl.extensions.MetadataExtensions { *; }'
    keep 'class proguard.classfile.kotlin.visitor.AllKotlinAnnotationArgumentVisitor {*;}'
    keep includecode: true, 'class org.apache.logging.log4j.** { *; }'
}

clean {
    delete file('lib/kotlin-metadata-printer.jar')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.guardsquare'
            artifactId = 'kotlin-metadata-printer'

            from components.java
        }
    }
}

tasks.withType(Tar) {
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip) {
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
