plugins {
    id 'java'
    id 'java-library'
    id 'java-test-fixtures'
    id 'maven-publish'
    id "org.jlleitschuh.gradle.ktlint" version '10.2.1'
    id "org.jetbrains.kotlin.jvm" version "1.7.20"
    id 'signing'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
    withJavadocJar()
    withSourcesJar()
}

components.java.withVariantsFromConfiguration(configurations.testFixturesApiElements) { skip() }
components.java.withVariantsFromConfiguration(configurations.testFixturesRuntimeElements) { skip() }

test {
    useJUnitPlatform()
}

dependencies {
    api("com.guardsquare:proguard-core:9.0.4")

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:1.7.20"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:1.7.20"
    testImplementation 'com.github.tschuchortdev:kotlin-compile-testing:1.4.9'
    testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.4.2' // for kotest framework
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.4.2' // for kotest core jvm assertions
    testImplementation 'io.kotest:kotest-property-jvm:5.4.2' // for kotest property test
    testImplementation 'io.mockk:mockk:1.12.8' // for mocking

    testImplementation(testFixtures("com.guardsquare:proguard-core:9.0.4"))
}

publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            groupId = 'com.guardsquare'
            artifactId = 'kotlin-metadata-printer'
            version = version

            from components.java

            if (project.hasProperty('PROGUARD_SIGNING_KEY')) {
                // We use in-memory ascii-armored keys
                // See https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys
                signing {
                    String key = project.findProperty('PROGUARD_SIGNING_KEY')
                    String password = project.findProperty('PROGUARD_SIGNING_PASSWORD')
                    useInMemoryPgpKeys(key, password)
                    sign publication
                }
            }
        }
    }
}

